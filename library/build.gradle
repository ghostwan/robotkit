apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'org.jetbrains.dokka-android'

group = 'com.github.ghostwan'

android {
    compileSdkVersion 27
    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 27
        versionCode 1
        versionName version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildToolsVersion '27.0.3'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.5'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:0.22.5'
    api 'com.aldebaran:qisdk:1.1.11'
}
kotlin {
    experimental {
        coroutines "enable"
    }
}



// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

dokka {
    outputFormat = 'html'
    outputDirectory = "../docs/kdoc"
    skipEmptyPackages = true
    externalDocumentationLink {
        url = new URL("https://android.aldebaran.com/sdk/doc/qisdk/")
        url = new URL("https://android.aldebaran.com/sdk/doc/libqi-java/")
    }
}

task javadok(type: Jar, dependsOn: dokka) {
    from "../docs/kdoc"
    classifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives javadok
}